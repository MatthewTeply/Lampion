<?php

namespace Lampion\Form;

use Error;
use Lampion\Application\Application;
use Lampion\FileSystem\FileSystem;

use Lampion\Http\Router;
use Lampion\Http\Request;
use Lampion\Http\Response;

use Lampion\Core\Cookie;

/**
 * A middleman that handles output of forms generated by Form
 * @author Matyáš Teplý
 */
class FormHandler {

    public function handle(string $field, $data) {
        # Default field's controller
        $className = 'Lampion\\Form\\Field\\' . ucfirst($field) . 'FormField';
        $class     = null;

        # Check if field's controller is overwritten in current app, or if a custom one is specified
        if(class_exists(ucfirst(Application::name()) . '\Form\Field\\' . ucfirst($field) . 'FormField')) {
            $className = ucfirst(Application::name()) . '\Form\Field\\' . ucfirst($field) . 'FormField';
        }

        if(class_exists($className)) {
            $class = new $className();

            return $class->submit($data);
        }

        else {
            # Handling files
            if(isset($data['tmp_name'])) {
                foreach($data as $key => $value) {
                    $data[$key] = $value['value'];
                } 

                $fs = new FileSystem();

                try {
                    return $fs->upload($data, '');
                }

                catch(Error $e) {
                    return $e;
                }
            }

            return $data;
        }
    }

    public function registerRoutes(Router &$router) {
        $router->post('form', function(Request $req, Response $res) {
            $post = null;

            foreach($_POST as $key => $data) {
                if(isset($data['value']) && isset($data['type'])) {
                    $post[$key] = $this->handle($data['type'], $data['value']);
                }
            }

            foreach($_FILES as $key => $data) {
                $post[$key] = $this->handle($key, $data);
            }

            $post['authToken'] = Cookie::get('lampionToken') ?? null;

            if($req->isAjax()) {
                $post['lampionIsAjaxRequest'] = true;
            }

            $useragent = $_SERVER['HTTP_USER_AGENT'];
            $ckfile = tempnam ("/tmp", "CURLCOOKIE");
           
            session_write_close();

            $ch = curl_init($_POST['action']);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($ch, CURLOPT_COOKIESESSION, true);

            foreach($post as $key => $data) {
                if(is_iterable($data)) {
                    $post[$key] = json_encode($data);
                }
            }

            curl_setopt($ch, CURLOPT_POSTFIELDS, $post);
            curl_setopt($ch,CURLOPT_USERAGENT, $useragent);
            curl_setopt ($ch, CURLOPT_COOKIEFILE, $ckfile);

            $response = curl_exec($ch);
            $httpcode = curl_getinfo($ch, CURLINFO_HTTP_CODE);

            $res->send($response);
            curl_close($ch);

            // TODO: Response check
            if($httpcode == 302)  {
                // Success
            }

            else {
                // Fail
            }
        });
    }

}